{"version":3,"sources":["logo.svg","Components/Results.js","Components/Options.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","dat","Results","props","handleData","TimeAgo","addLocale","en","timeAgo","map","item","index","event","format","Date","created_at","key","src","user","avatar_url","alt","className","name","username","toString","body","state","results","this","forEach","i","push","Component","history","Options","handleAddValues","e","getResults","value","then","data","handleState","messages","symbol","tag","setState","resCount","length","sendData","baseState","res","params","url","fetch","method","dataType","ok","json","Promise","reject","s","isMulti","options","label","classNamePrefix","onChange","AAPL","BABA","BAC","BLDP","Header","App","handleChild","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,yMCIvCC,EAAM,GA0CKC,E,YAvCb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAWRC,WAAa,WACXC,IAAQC,UAAUC,KAClB,IAAMC,EAAU,IAAIH,IAAQ,SAC5B,OAAOJ,EAAIQ,KAAI,SAACC,EAAMC,GACpB,IAAIC,EAAQJ,EAAQK,OAAO,IAAIC,KAAKJ,EAAKK,aACzC,OACE,wBAAIC,IAAKL,GACP,yBAAKM,IAAKP,EAAKQ,KAAKC,WAAYC,IAAG,gBAAWT,KAC9C,yBAAKU,UAAU,YACb,0BAAMA,UAAU,YAAhB,UAA+BX,EAAKQ,KAAKI,KAAzC,MACA,0BAAMD,UAAU,eAAhB,YAAoCX,EAAKQ,KAAKK,SAA9C,MACA,0BAAMF,UAAU,YAAYT,EAAMY,YAClC,yBAAKH,UAAU,aACb,2BAAIX,EAAKe,aAvBnB,EAAKC,MAAQ,CACXC,QAAS,IAHM,E,mFAQjB1B,EAAM,GACN2B,KAAKzB,MAAMwB,QAAQE,SAAQ,SAAAC,GAAC,OAAIA,EAAErB,KAAI,SAACC,EAAMC,GAAP,OAAiBV,EAAI8B,KAAKrB,W,+BA0BhE,OADAkB,KAAKxB,WAAWH,GACT,6BAAM2B,KAAKxB,kB,GApCA4B,a,yjBCFtB,IAAIC,EAAU,GA8HCC,E,YA3Hb,WAAY/B,GAAQ,IAAD,8BACjB,4CAAMA,KAaRgC,gBAAkB,SAAAC,GAeZA,GACFH,EAAU,GACVG,EAAEP,SAAQ,SAAAnB,GAAI,OACZ,EAAK2B,WAAW3B,EAAK4B,OAAOC,MAAK,SAAAC,GAAI,OACnC,EAAKC,YAAYD,EAAKE,SAAUF,EAAKG,OAAOA,eAIhD,EAAKF,YAAY,OArCF,EAwDnBA,YAAc,SAACd,EAASiB,GACtBX,EAAQF,KAAKJ,GACRA,GAIH,EAAKkB,SAAS,CACZlB,QAAQ,CAAEA,GAAH,mBAAe,EAAKD,MAAMC,UACjCmB,SAAS,EAAD,eAAKF,EAAMjB,EAAQoB,QAAW,EAAKrB,MAAMoB,YAEnD,EAAKE,SAAS,EAAKtB,MAAMC,WAPzB,EAAKkB,SAAS,EAAKI,WACnB,EAAKD,SAAS,QA5DC,EAwEnBA,SAAW,SAAAE,GACT,EAAK/C,MAAMC,WAAW8C,IAvEtB,EAAKxB,MAAQ,CACXC,QAAS,GACTmB,SAAU,IAGZ,EAAKG,UAAY,EAAKvB,MAPL,E,wEA2CRyB,EAAQxC,GACjBiB,KAAKiB,SAASjB,KAAKqB,WACnB,IAAIG,EAAG,0DAAsDD,EAAtD,SACP,OAAOE,MAAMD,EAAK,CAChBE,OAAQ,MACRC,SAAU,UACThB,MAAK,SAAAW,GAAG,OACRA,EAAIM,GAA+CN,EAAIO,OAA9CP,EAAIO,OAAOlB,MAAK,SAAAH,GAAC,OAAIsB,QAAQC,OAAOvB,W,+BA0BxC,IAAD,OACHwB,EAAIhC,KAAKF,MAAMoB,SAYnB,OACE,yBAAKzB,UAAU,UACb,yBAAKA,UAAU,UACb,kBAAC,IAAD,CACEwC,SAAO,EACPvC,KAAK,UACLwC,QAbQ,CACd,CAAExB,MAAO,OAAQyB,MAAO,QACxB,CAAEzB,MAAO,OAAQyB,MAAO,QACxB,CAAEzB,MAAO,MAAOyB,MAAO,OACvB,CAAEzB,MAAO,OAAQyB,MAAO,SAUlB1C,UAAU,qBACV2C,gBAAgB,SAChBC,SAAU,SAAA7B,GAAC,OAAI,EAAKD,gBAAgBC,MAEtC,yBAAKf,UAAU,iBACb,yBAAKA,UAAWuC,EAAEM,KAAO,YAAc,YACnCN,EAAEM,KAAH,gBAAwBN,EAAEM,KAA1B,KAAU,IAEb,yBAAK7C,UAAWuC,EAAEO,KAAO,YAAc,YACnCP,EAAEO,KAAH,gBAAwBP,EAAEO,KAA1B,KAAU,IAEb,yBAAK9C,UAAWuC,EAAEQ,IAAM,YAAc,YAClCR,EAAEQ,IAAH,eAAsBR,EAAEQ,IAAxB,KAAS,IAEZ,yBAAK/C,UAAWuC,EAAES,KAAO,YAAc,YACnCT,EAAES,KAAH,gBAAwBT,EAAES,KAA1B,KAAU,MAIjB,yBAAKhD,UAAU,YACb,kBAAC,EAAD,CAASM,QAASC,KAAKF,MAAMC,gB,GArHjBK,aCJTsC,EAAQ,WACnB,OACE,yBAAKjD,UAAU,WACb,8CCuCSkD,E,2MAtBb7C,MAAQ,CACNc,KAAM,I,EAGRgC,YAAc,SAAAhC,GACPA,EAGH,EAAKK,SAAS,CAAEL,SAFhB,EAAKK,SAAS,CAAEL,KAAM,M,wEAOxB,OACE,yBAAKnB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASjB,WAAYwB,KAAK4C,mB,GAjBhBxC,aCTEyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACT,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.a7845824.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport TimeAgo from 'javascript-time-ago';\r\nimport en from 'javascript-time-ago/locale/en';\r\n\r\nlet dat = [];\r\n\r\nclass Results extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      results: []\r\n    };\r\n  }\r\n\r\n  componentWillUpdate() {\r\n    dat = [];\r\n    this.props.results.forEach(i => i.map((item, index) => dat.push(item)));\r\n  }\r\n\r\n  handleData = () => {\r\n    TimeAgo.addLocale(en);\r\n    const timeAgo = new TimeAgo('en-US');\r\n    return dat.map((item, index) => {\r\n      let event = timeAgo.format(new Date(item.created_at));\r\n      return (\r\n        <li key={index}>\r\n          <img src={item.user.avatar_url} alt={`avatar${index}`} />\r\n          <div className=\"usr-info\">\r\n            <span className=\"usr-name\">{`${item.user.name} `}</span>\r\n            <span className=\"usr-usrname\">{` @${item.user.username} `}</span>\r\n            <span className=\"dateTime\">{event.toString()}</span>\r\n            <div className=\"post-cont\">\r\n              <p>{item.body}</p>\r\n            </div>\r\n          </div>\r\n        </li>\r\n      );\r\n    });\r\n  };\r\n\r\n  render() {\r\n    this.handleData(dat);\r\n    return <div>{this.handleData()}</div>;\r\n  }\r\n}\r\n\r\nexport default Results;\r\n","import React, { Component } from 'react';\r\nimport Select from 'react-select';\r\nimport Results from './Results';\r\n\r\nlet history = [];\r\n\r\nclass Options extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      results: [],\r\n      resCount: {}\r\n    };\r\n    // preserve the initial state in a new object\r\n    this.baseState = this.state;\r\n  }\r\n\r\n  //Process the parameters and manage the response from the API\r\n  //Due to the restrictions the API has introduces with partner level access\r\n  //we are calling the API once per selected option\r\n\r\n  handleAddValues = e => {\r\n    //Built for polling, but not in use due to the API rate limit. Avoiding app being blacklisted for DOS attack.\r\n    //Ideally would like to use a socket to keep open communication with server if it werent restrictive.\r\n\r\n    // setInterval(() => {\r\n    //   console.log('polling')\r\n    //   e.forEach((item, index) =>\r\n    //     this.getResults(item.value).then(data =>\r\n    //       function(JSON.stringify(data.messages) === JSON.stringify(history[0])) => {\r\n    //        this.handleState(data.messages)\r\n    //}\r\n    //     )\r\n    //   );\r\n    // }, 60000);\r\n\r\n    if (e) {\r\n      history = [];\r\n      e.forEach(item =>\r\n        this.getResults(item.value).then(data =>\r\n          this.handleState(data.messages, data.symbol.symbol)\r\n        )\r\n      );\r\n    } else {\r\n      this.handleState(null);\r\n    }\r\n  };\r\n\r\n  //Call the API with our selected parameters\r\n\r\n  getResults(params, index) {\r\n    this.setState(this.baseState);\r\n    let url = `https://api.stocktwits.com/api/2/streams/symbol/${params}.json`;\r\n    return fetch(url, {\r\n      method: 'GET',\r\n      dataType: 'jsonp'\r\n    }).then(res =>\r\n      !res.ok ? res.json().then(e => Promise.reject(e)) : res.json()\r\n    );\r\n  }\r\n\r\n  //Set the state locally and send to the parent for page re-render and content update\r\n\r\n  handleState = (results, tag) => {\r\n    history.push(results);\r\n    if (!results) {\r\n      this.setState(this.baseState);\r\n      this.sendData(null);\r\n    } else {\r\n      this.setState({\r\n        results: [results, ...this.state.results],\r\n        resCount: { [tag]: results.length, ...this.state.resCount }\r\n      });\r\n      this.sendData(this.state.results);\r\n    }\r\n  };\r\n\r\n  //function for communicating with parent\r\n\r\n  sendData = res => {\r\n    this.props.handleData(res);\r\n  };\r\n\r\n  render() {\r\n    let s = this.state.resCount;\r\n\r\n    //User input introduces errors, used a searchable select.\r\n    //It is scalable and more options could be added without problems.\r\n\r\n    const options = [\r\n      { value: 'AAPL', label: 'AAPL' },\r\n      { value: 'BABA', label: 'BABA' },\r\n      { value: 'BAC', label: 'BAC' },\r\n      { value: 'BLDP', label: 'BLDP' }\r\n    ];\r\n\r\n    return (\r\n      <div className=\"op-ctr\">\r\n        <div className=\"op-bar\">\r\n          <Select\r\n            isMulti\r\n            name=\"options\"\r\n            options={options}\r\n            className=\"basic-multi-select\"\r\n            classNamePrefix=\"select\"\r\n            onChange={e => this.handleAddValues(e)}\r\n          />\r\n          <div className=\"res-count-ctr\">\r\n            <div className={s.AAPL ? 'res-count' : 'res-hide'}>\r\n              {!s.AAPL ? '' : `AAPL (${s.AAPL})`}\r\n            </div>\r\n            <div className={s.BABA ? 'res-count' : 'res-hide'}>\r\n              {!s.BABA ? '' : `BABA (${s.BABA})`}\r\n            </div>\r\n            <div className={s.BAC ? 'res-count' : 'res-hide'}>\r\n              {!s.BAC ? '' : `BAC (${s.BAC})`}\r\n            </div>\r\n            <div className={s.BLDP ? 'res-count' : 'res-hide'}>\r\n              {!s.BLDP ? '' : `BLDP (${s.BLDP})`}\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"data-res\">\r\n          <Results results={this.state.results} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Options;\r\n","import React from 'react';\r\n\r\nexport const Header =() =>{\r\n  return(\r\n    <div className='hdr-ctr'>\r\n      <h1>Stock Tweets</h1>\r\n    </div>\r\n  )\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Options from './Components/Options';\nimport Results from './Components/Results';\nimport { Header } from './Components/Header';\n\n// Using React and whatever other libraries you’d like, create a simple application using the\n// StockTwits API. Use of UI libraries is allowed.\n// Hint: you will need to have separate backend to handle CORS.\n\n// ● When a new tweet comes in, it should automatically be added without having to refresh\n// the page.\n\n//use polling every 60 seconds\n\n// ● The page has to be responsive.\n\n// ● Pay attention to details and make the user-interface and user-experience the best you\n// possibly can, considering time constraints.\n\nclass App extends Component {\n  state = {\n    data: []\n  };\n\n  handleChild = data => {\n    if (!data) {\n      this.setState({ data: [] });\n    } else {\n      this.setState({ data });\n    }\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Options handleData={this.handleChild} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}